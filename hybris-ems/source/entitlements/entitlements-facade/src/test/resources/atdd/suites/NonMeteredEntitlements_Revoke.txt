*** Settings ***
Resource    entitlements-test/settings_keywords.txt
Resource    entitlements-test/builder_entitlements_keywords.txt
Resource    entitlements-test/modify_entitlements_keywords.txt
Resource    entitlements-test/exceptions_entitlements_keywords.txt
Resource    entitlements-test/check_entitlements_keywords.txt
Resource    entitlements-test/use_entitlements_keywords.txt

*** Test Cases ***

### REVOKE BY USERID+ENTITLEMENT_TYPE+GRANT_SOURCE+GRANT_SOURCE_ID:
### WITHOUT CONDITION:
Test_NonMeteredEntitlements_Revoke_SimpleType
    [Documentation]    Entitlement with filters
    ${entitlementType}      Set Variable    ENT_SIMPLE
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ensure there are "0" entitlements for user "${userId}"
    
Test_NonMeteredEntitlements_Revoke_SimpleType_MulitpleEntitlements
	[Documentation]    Tests if it is possible to remove multiple entitlements granted with same
	...                userId, entitlementType, grantSource & grantSourceId 
	${userId} =     generate random id
	ensure there are "0" entitlements for user "${userId}"
	# ENTITLEMENT 1:
	${entitlement1}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
	assign grantSourceId "grantSourceId" to entitlement "${entitlement1}"
	assign grantSource "grantSource" to entitlement "${entitlement1}"
	grant entitlement "${entitlement1}"
	# ENTITLEMENT 2:
	${entitlement2}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
	assign grantSourceId "grantSourceId" to entitlement "${entitlement2}"
	assign grantSource "grantSource" to entitlement "${entitlement2}"
	grant entitlement "${entitlement2}"
	check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
	ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	ensure there are "2" entitlements for user "${userId}"
	# REVOKE
	revoke entitlement for user "${userId}" and entitlementType "ENT_SIMPLE" and grantSource "grantSource" and grantSourceId "grantSourceId"
	ensure there are "0" entitlements for user "${userId}"
	check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
	ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB

Test_NonMeteredEntitlements_Revoke_SimpleTypex2_No1
    [Documentation]    Entitlement with filters
    ${entitlementType}      Set Variable    ENT_SIMPLE
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_SimpleTypex2_No2
    [Documentation]    Simple Entitlement - two: both with the same grantSources and grantSourceIds, but different entitlementType
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource}      Set Variable    grantSource
    ${grantSourceId}      Set Variable    grantSourceId
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType1}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType2}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_SimpleTypex2_No3
    [Documentation]    Entitlement with filters
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType1}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType2}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

### REVOKE BY USERID+ENTITLEMENT_TYPE+GRANT_SOURCE+GRANT_SOURCE_ID:
### STRING:
Test_NonMeteredEntitlements_Revoke_StringConditionType
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType}      Set Variable    ENT_STR
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_StringConditionType_x2
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType}      Set Variable    ENT_STR
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_StringConditionType_x2_2Users
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType}      Set Variable    ENT_STR
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${userId1} =     generate random id
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId2} =     generate random id
    #USER1 ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId1}"
    add condition "${GRANT_STR}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    #USER2 ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId2}"
    add condition "${GRANT_STR}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...USER1 ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...USER2 ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE USER1 ENT1
    revoke entitlement for user "${userId1}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId1}" is "false"
    #...USER2 ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId2}" is "true"
    #...REVOKE USER2 ENT2
    revoke entitlement for user "${userId2}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId1}" is "false"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId2}"

Test_NonMeteredEntitlements_Revoke_StringConditionType_IncorrectParameters
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType}      Set Variable    ENT_STR
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType_incorrect}      Set Variable    ENT_INCORRECT
    ${grantSource_incorrect}      Set Variable    grantSource_incorrect
    ${grantSourceId_incorrect}      Set Variable    grantSourceId_incorrect
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ### REVOKE WITH INCORRECT PARAMETERS:
    #...REVOKE ENT1 - INCORRECT entitlementType
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### REVOKE BY USERID+ENTITLEMENT_TYPE+GRANT_SOURCE+GRANT_SOURCE_ID:
### PATH:
Test_NonMeteredEntitlements_Revoke_PathConditionType
    [Documentation]    Entitlement with filters
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${entitlementType}      Set Variable    ENT_PATH
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_PathConditionType_x2
    [Documentation]    Entitlement with filters
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${entitlementType}      Set Variable    ENT_PATH
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_PathConditionType_IncorrectParameters
    [Documentation]    Entitlement with filters
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${entitlementType}      Set Variable    ENT_PATH
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType_incorrect}      Set Variable    ENT_INCORRECT
    ${grantSource_incorrect}      Set Variable    grantSource_incorrect
    ${grantSourceId_incorrect}      Set Variable    grantSourceId_incorrect
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ### REVOKE WITH INCORRECT PARAMETERS:
    #...REVOKE ENT1 - INCORRECT entitlementType
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### REVOKE BY USERID+ENTITLEMENT_TYPE+GRANT_SOURCE+GRANT_SOURCE_ID:
### TIMEFRAME:
Test_NonMeteredEntitlements_Revoke_TimeframeConditionType
    [Documentation]    Entitlement with filters
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType}      Set Variable    ENT_TIME
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_TimeframeConditionType_x2
    [Documentation]    Entitlement with filters
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType}      Set Variable    ENT_TIME
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_TimeframeConditionType_IncorrectParameters
    [Documentation]    Entitlement with filters
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType}      Set Variable    ENT_TIME
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType_incorrect}      Set Variable    ENT_INCORRECT
    ${grantSource_incorrect}      Set Variable    grantSource_incorrect
    ${grantSourceId_incorrect}      Set Variable    grantSourceId_incorrect
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ### REVOKE WITH INCORRECT PARAMETERS:
    #...REVOKE ENT1 - INCORRECT entitlementType
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### REVOKE BY USERID+ENTITLEMENT_TYPE+GRANT_SOURCE+GRANT_SOURCE_ID:
### STRING+PATH+TIMEFRAME:
Test_NonMeteredEntitlements_Revoke_StringAndPathAndTimeframeConditionType
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType}      Set Variable    ENT_STR_PATH_TIME
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_StringAndPathAndTimeframeConditionType_x2
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType}      Set Variable    ENT_STR_PATH_TIME
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement1}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement1}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement2}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement2}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_StringAndPathAndTimeframeConditionType_IncorrectParameters
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType}      Set Variable    ENT_STR_PATH_TIME
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType_incorrect}      Set Variable    ENT_INCORRECT
    ${grantSource_incorrect}      Set Variable    grantSource_incorrect
    ${grantSourceId_incorrect}      Set Variable    grantSourceId_incorrect
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement1}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement1}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ### REVOKE WITH INCORRECT PARAMETERS:
    #...REVOKE ENT1 - INCORRECT entitlementType
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### REVOKE BY USERID+ENTITLEMENT_TYPE+GRANT_SOURCE+GRANT_SOURCE_ID:
### SIMPLE, STRING, PATH, TIMEFRAME:
Test_NonMeteredEntitlements_Revoke_ConditionType_SimpleType_StringType_PathType_TimeframeType
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType_simple}      Set Variable    ENT_SIMPLE
    ${grantSource_simple}      Set Variable    grantSource_simple
    ${grantSourceId_simple}      Set Variable    grantSourceId_simple
    ${entitlementType_str}      Set Variable    ENT_STR
    ${grantSource_str}      Set Variable    grantSource_str
    ${grantSourceId_str}      Set Variable    grantSourceId_str
    ${entitlementType_path}      Set Variable    ENT_PATH
    ${grantSource_path}      Set Variable    grantSource_path
    ${grantSourceId_path}      Set Variable    grantSourceId_path
    ${entitlementType_time}      Set Variable    ENT_TIME
    ${grantSource_time}      Set Variable    grantSource_time
    ${grantSourceId_time}      Set Variable    grantSourceId_time
    ${userId} =     generate random id
    #ENT_SIMPLE
    ${entitlement_simple}=    create entitlement with entitlementType "${entitlementType_simple}" for user "${userId}"
    assign grantSourceId "${grantSourceId_simple}" to entitlement "${entitlement_simple}"
    assign grantSource "${grantSource_simple}" to entitlement "${entitlement_simple}"
    check entitlement with entitlementType "${entitlementType_simple}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "false" in DB
    ${entitlement_simple}=    grant entitlement "${entitlement_simple}"
    check entitlement with entitlementType "${entitlementType_simple}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #ENT_STR
    ${entitlement_str}=    create entitlement with entitlementType "${entitlementType_str}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement_str}"
    assign grantSourceId "${grantSourceId_str}" to entitlement "${entitlement_str}"
    assign grantSource "${grantSource_str}" to entitlement "${entitlement_str}"
    check entitlement with entitlementType "${entitlementType_str}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "false" in DB
    ${entitlement_str}=    grant entitlement "${entitlement_str}"
    check entitlement with entitlementType "${entitlementType_str}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #ENT_PATH
    ${entitlement_path}=    create entitlement with entitlementType "${entitlementType_path}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement_path}"
    assign grantSourceId "${grantSourceId_path}" to entitlement "${entitlement_path}"
    assign grantSource "${grantSource_path}" to entitlement "${entitlement_path}"
    check entitlement with entitlementType "${entitlementType_path}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "false" in DB
    ${entitlement_path}=    grant entitlement "${entitlement_path}"
    check entitlement with entitlementType "${entitlementType_path}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #ENT_TIME
    ${entitlement_time}=    create entitlement with entitlementType "${entitlementType_time}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement_time}"
    assign grantSourceId "${grantSourceId_time}" to entitlement "${entitlement_time}"
    assign grantSource "${grantSource_time}" to entitlement "${entitlement_time}"
    check entitlement with entitlementType "${entitlementType_time}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "false" in DB
    ${entitlement_time}=    grant entitlement "${entitlement_time}"
    check entitlement with entitlementType "${entitlementType_time}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    ### REVOKE WITH INCORRECT PARAMETERS:
    ## REVOKE ENT_SIMPLE:
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSource - STR used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSource - PATH used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSource - TIME used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType AND grantSource - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType AND grantSource - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType AND grantSource - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType AND grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType AND grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType AND grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSource AND grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSource AND grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT grantSource AND grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE - INCORRECT entitlementType AND grantSource AND grantSourceId - STR/PATH/TIME mixed used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    #############################################################
    ## REVOKE ENT_STR:
    #...REVOKE ENT_STR - INCORRECT entitlementType - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSource - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSource - PATH used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSource - TIME used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType AND grantSource - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType AND grantSource - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType AND grantSource - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType AND grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType AND grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType AND grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSource AND grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSource AND grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT grantSource AND grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR - INCORRECT entitlementType AND grantSource AND grantSourceId - SIMPLE/PATH/TIME mixed used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    #############################################################
    ## REVOKE ENT_PATH:
    #...REVOKE ENT_PATH - INCORRECT entitlementType - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSource - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSource - STR used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSource - TIME used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType AND grantSource - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType AND grantSource - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType AND grantSource - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType AND grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType AND grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType AND grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSource AND grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSource AND grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT grantSource AND grantSourceId - TIME used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH - INCORRECT entitlementType AND grantSource AND grantSourceId - SIMPLE/STR/TIME mixed used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    #############################################################
    ## REVOKE ENT_TIME:
    #...REVOKE ENT_TIME - INCORRECT entitlementType - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSource - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSource - STR used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSource - PATH used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType AND grantSource - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType AND grantSource - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType AND grantSource - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType AND grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType AND grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType AND grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSource AND grantSourceId - SIMPLE used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSource AND grantSourceId - STR used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT grantSource AND grantSourceId - PATH used
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME - INCORRECT entitlementType AND grantSource AND grantSourceId - SIMPLE/STR/PATH mixed used
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #############################################################
    ### REVOKE WITH CORRECT PARAMETERS:
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_SIMPLE
    #revoke entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}" and grantSourceId "${grantSourceId_simple}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_STR
    #revoke entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}" and grantSourceId "${grantSourceId_str}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_PATH
    #revoke entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}" and grantSourceId "${grantSourceId_path}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "true" in DB
    #...REVOKE ENT_TIME
    #revoke entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}" and grantSourceId "${grantSourceId_time}"
    ensure that entitlement with entitlementType "${entitlementType_simple}" and grantSource "${grantSource_simple}", grantSourceId "${grantSourceId_simple}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_str}" and grantSource "${grantSource_str}", grantSourceId "${grantSourceId_str}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_path}" and grantSource "${grantSource_path}", grantSourceId "${grantSourceId_path}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType_time}" and grantSource "${grantSource_time}", grantSourceId "${grantSourceId_time}" for user "${userId}" is "false" in DB
    ensure there are "0" entitlements for user "${userId}"

### REVOKE BY USERID+ENTITLEMENT_TYPE+GRANT_SOURCE+GRANT_SOURCE_ID:
### GEOCONDITION:
Test_NonMeteredEntitlements_Revoke_GeoConditionType
    [Documentation]    Entitlement with filters
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType}      Set Variable    ENT_GEO
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource}" and grantSourceId "${grantSourceId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_GeoConditionType_x2_1User
    [Documentation]    Entitlement with filters
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType}      Set Variable    ENT_GEO
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE ENT1
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #...ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    #...REVOKE ENT2
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_Revoke_GeoConditionType_x2_2Users
    [Documentation]    Entitlement with filters
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType}      Set Variable    ENT_GEO
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${userId1} =     generate random id
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId2} =     generate random id
    #USER1 ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId1}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    #USER2 ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId2}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...USER1 ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...USER2 ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    #...REVOKE USER1 ENT1
    revoke entitlement for user "${userId1}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId1}" is "false"
    #...USER2 ENT2 exists still:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId2}" is "true"
    #...REVOKE USER2 ENT2
    revoke entitlement for user "${userId2}" and entitlementType "${entitlementType}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId1}" is "false"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId2}"

Test_NonMeteredEntitlements_Revoke_GeoConditionType_IncorrectParameters
    [Documentation]    Entitlement with filters
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType}      Set Variable    ENT_GEO
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType_incorrect}      Set Variable    ENT_INCORRECT
    ${grantSource_incorrect}      Set Variable    grantSource_incorrect
    ${grantSourceId_incorrect}      Set Variable    grantSourceId_incorrect
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ### REVOKE WITH INCORRECT PARAMETERS:
    #...REVOKE ENT1 - INCORRECT entitlementType
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId1}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...REVOKE ENT1 - INCORRECT entitlementType AND grantSource AND grantSourceId
    revoke entitlement for user "${userId}" and entitlementType "${entitlementType_incorrect}" and grantSource "${grantSource_incorrect}" and grantSourceId "${grantSourceId_incorrect}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### REVOKE BY USERID ONLY:
### WITHOUT CONDITION:

Test_NonMeteredEntitlements_RevokeByUserId_SimpleType_1User
    [Documentation]    Simple Entitlement - single
    ${entitlementType}      Set Variable    ENT_SIMPLE
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    revoke entitlements for user "${userId}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_SimpleTypex2_1User_No1
    [Documentation]    Simple Entitlement - two: both with the same entitlementType, but different grantSources and grantSourceIds
    ${entitlementType}      Set Variable    ENT_SIMPLE
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    revoke entitlements for user "${userId}"
    #...NO ENTITLEMENT EXISTS FOR USER:
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_SimpleTypex2_1User_No2
    [Documentation]    Simple Entitlement - two: both with the same grantSources and grantSourceIds, but different entitlementType
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource}      Set Variable    grantSource
    ${grantSourceId}      Set Variable    grantSourceId
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    revoke entitlements for user "${userId}"
    #...NO ENTITLEMENT EXISTS FOR USER:
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_SimpleTypex2_1User_No3
    [Documentation]    Simple Entitlement - two: each with different entitlementType, grantSource and grantSourceId
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    #ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...ENT1
    ${entitlement1}=    grant entitlement "${entitlement1}"
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    #...ENT2
    ${entitlement2}=    grant entitlement "${entitlement2}"
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    ### REVOKE WITH CORRECT PARAMETERS:
    revoke entitlements for user "${userId}"
    #...NO ENTITLEMENT EXISTS FOR USER:
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_SimpleType_2Users
    [Documentation]    Simple Entitlement - single. Two users
    ${entitlementType}      Set Variable    ENT_SIMPLE
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId1} =     generate random id
    ${userId2} =     generate random id
    #...USER1
    check entitlement with entitlementType "${entitlementType}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId1}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId1}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    #...USER2
    check entitlement with entitlementType "${entitlementType}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId2}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId2}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    #...CHECK ENTITLEMENTS FOR USERS
    check entitlement with entitlementType "${entitlementType}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER1
    revoke entitlements for user "${userId1}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER2
    revoke entitlements for user "${userId2}"
    check entitlement with entitlementType "${entitlementType}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId2}"

Test_NonMeteredEntitlements_Revoke_SimpleType_Multi
    [Documentation]    Revoke grants using only user ID (US6310)
    ${entitlementType1}      Set Variable    ENT_SIMPLE1
    ${entitlementType2}      Set Variable    ENT_SIMPLE2
    ${entitlementType3}      Set Variable    ENT_SIMPLE3
    ${userId1} =       generate random id
    ${userId2} =       generate random id
    ${userId3} =       generate random id
    grant entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType2}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType3}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType1}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType3}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType1}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType2}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType3}" for user "${userId3}"
    ensure there are "3" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 1
    revoke entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 3
    revoke entitlements for user "${userId3}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"
    #...REVOKE FOR USER 2
    revoke entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId2}"
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"

### REVOKE BY USERID ONLY:
### STRING:
Test_NonMeteredEntitlements_RevokeByUserId_StringConditionType_1User
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType}      Set Variable    ENT_STR
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_StringConditionType_x2_1User
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType1}      Set Variable    ENT_STR_1
    ${entitlementType2}      Set Variable    ENT_STR_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...GRANT ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_StringConditionType_2Users
    [Documentation]    Entitlement with filters
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType1}      Set Variable    ENT_STR_1
    ${entitlementType2}      Set Variable    ENT_STR_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${userId1} =     generate random id
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_STR}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    add condition "${GRANT_STR}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2 FOR USER2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    add condition "${GRANT_STR}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_STR}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER1
    revoke entitlements for user "${userId1}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_STR}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER2
    revoke entitlements for user "${userId2}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_STR}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_STR}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId2}"

Test_NonMeteredEntitlements_RevokeByUserId_StringConditionType_Multi
    [Documentation]    Revoke grants using only user ID (US6310)
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${entitlementType1}      Set Variable    ENT_STR_1
    ${entitlementType2}      Set Variable    ENT_STR_2
    ${entitlementType3}      Set Variable    ENT_STR_3
    ${userId1} =       generate random id
    ${userId2} =       generate random id
    ${userId3} =       generate random id
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_STR}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_STR}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_STR}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_STR}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_STR}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_STR}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_STR}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_STR}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_STR}" for user "${userId3}"
    ensure there are "3" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 1
    revoke entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 3
    revoke entitlements for user "${userId3}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"
    #...REVOKE FOR USER 2
    revoke entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId2}"
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"

### REVOKE BY USERID ONLY:
### PATH:
Test_NonMeteredEntitlements_RevokeByUserId_PathConditionType_1User
    [Documentation]    Entitlement with filters
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root/subdirectory"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root/subdirectory"}
    ${entitlementType}      Set Variable    ENT_PATH
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_PathConditionType_x2_1User
    [Documentation]    Entitlement with filters
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root/subdirectory"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root/subdirectory"}
    ${entitlementType1}      Set Variable    ENT_PATH_1
    ${entitlementType2}      Set Variable    ENT_PATH_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...GRANT ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_PathConditionType_2Users
    [Documentation]    Entitlement with filters
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root/subdirectory"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root/subdirectory"}
    ${entitlementType1}      Set Variable    ENT_PATH_1
    ${entitlementType2}      Set Variable    ENT_PATH_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${userId1} =     generate random id
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_PATH}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2 FOR USER2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_PATH}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER1
    revoke entitlements for user "${userId1}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_PATH}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER2
    revoke entitlements for user "${userId2}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_PATH}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_PATH}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId2}"

Test_NonMeteredEntitlements_RevokeByUserId_PathConditionType_Multi
    [Documentation]    Revoke grants using only user ID (US6310)
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root/subdirectory"}
    ${entitlementType1}      Set Variable    ENT_PATH_1
    ${entitlementType2}      Set Variable    ENT_PATH_2
    ${entitlementType3}      Set Variable    ENT_PATH_3
    ${userId1} =       generate random id
    ${userId2} =       generate random id
    ${userId3} =       generate random id
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_PATH}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_PATH}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_PATH}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_PATH}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_PATH}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_PATH}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_PATH}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_PATH}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_PATH}" for user "${userId3}"
    ensure there are "3" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 1
    revoke entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 3
    revoke entitlements for user "${userId3}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"
    #...REVOKE FOR USER 2
    revoke entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId2}"
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"

### REVOKE BY USERID ONLY:
### TIMEFRAME:
Test_NonMeteredEntitlements_RevokeByUserId_TimeframeConditionType_1User
    [Documentation]    Entitlement with filters
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType}      Set Variable    ENT_TIME
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_TimeframeConditionType_x2_1User
    [Documentation]    Entitlement with filters
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType1}      Set Variable    ENT_TIME_1
    ${entitlementType2}      Set Variable    ENT_TIME_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...GRANT ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_TimeframeConditionType_2Users
    [Documentation]    Entitlement with filters
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${entitlementType1}      Set Variable    ENT_TIME_1
    ${entitlementType2}      Set Variable    ENT_TIME_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${userId1} =     generate random id
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_TIME}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2 FOR USER2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_TIME}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER1
    revoke entitlements for user "${userId1}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_TIME}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER2
    revoke entitlements for user "${userId2}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_TIME}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_TIME}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId2}"

Test_NonMeteredEntitlements_RevokeByUserId_TimeframeConditionType_Multi
    [Documentation]    Revoke grants using only user ID (US6310)
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${entitlementType1}      Set Variable    ENT_TIME_1
    ${entitlementType2}      Set Variable    ENT_TIME_2
    ${entitlementType3}      Set Variable    ENT_TIME_3
    ${userId1} =       generate random id
    ${userId2} =       generate random id
    ${userId3} =       generate random id
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_TIME}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_TIME}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_TIME}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_TIME}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_TIME}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_TIME}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_TIME}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_TIME}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_TIME}" for user "${userId3}"
    ensure there are "3" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 1
    revoke entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 3
    revoke entitlements for user "${userId3}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"
    #...REVOKE FOR USER 2
    revoke entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId2}"
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"

### REVOKE BY USERID+ENTITLEMENT_TYPE ONLY:

### REVOKE BY USERID ONLY:
### GEOCONDITION:
Test_NonMeteredEntitlements_RevokeByUserId_GeoConditionType_1User
    [Documentation]    Entitlement with filters
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType}      Set Variable    ENT_GEO
    ${grantSource}      Set Variable    grantSource_1
    ${grantSourceId}      Set Variable    grantSourceId_1
    ${userId} =     generate random id
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    assign grantSourceId "${grantSourceId}" to entitlement "${entitlement}"
    assign grantSource "${grantSource}" to entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "${grantSource}", grantSourceId "${grantSourceId}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_GeoConditionType_x2_1User
    [Documentation]    Entitlement with filters
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType1}      Set Variable    ENT_GEO_1
    ${entitlementType2}      Set Variable    ENT_GEO_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    #...GRANT ENT1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER
    revoke entitlements for user "${userId}"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    ensure there are "0" entitlements for user "${userId}"

Test_NonMeteredEntitlements_RevokeByUserId_GeoConditionType_2Users
    [Documentation]    Entitlement with filters
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType1}      Set Variable    ENT_GEO_1
    ${entitlementType2}      Set Variable    ENT_GEO_2
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${userId1} =     generate random id
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_GEO}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement1}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement1}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement1}"
    ${entitlement1}=    grant entitlement "${entitlement1}"
    #...GRANT ENT2 FOR USER2
    ${entitlement2}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement2}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement2}"
    ${entitlement2}=    grant entitlement "${entitlement2}"
    #...CHECK ENTITLEMENT(S) FOR USER(S)
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_GEO}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER1
    revoke entitlements for user "${userId1}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_GEO}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    #...REVOKE ENTITLEMENTS FOR USER2
    revoke entitlements for user "${userId2}"
    check entitlement with entitlementType "${entitlementType1}" and conditions "${CHECK_GEO}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" and conditions "${CHECK_GEO}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId2}"

Test_NonMeteredEntitlements_RevokeByUserId_GeoConditionType_Multi
    [Documentation]    Revoke grants using only user ID (US6310)
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType1}      Set Variable    ENT_GEO_1
    ${entitlementType2}      Set Variable    ENT_GEO_2
    ${entitlementType3}      Set Variable    ENT_GEO_3
    ${userId1} =       generate random id
    ${userId2} =       generate random id
    ${userId3} =       generate random id
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_GEO}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_GEO}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_GEO}" for user "${userId1}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_GEO}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_GEO}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_GEO}" for user "${userId2}"
    grant entitlement with entitlementType "${entitlementType1}" and conditions "${GRANT_GEO}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType2}" and conditions "${GRANT_GEO}" for user "${userId3}"
    grant entitlement with entitlementType "${entitlementType3}" and conditions "${GRANT_GEO}" for user "${userId3}"
    ensure there are "3" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 1
    revoke entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are "3" entitlements for user "${userId3}"
    #...REVOKE FOR USER 3
    revoke entitlements for user "${userId3}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are "3" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"
    #...REVOKE FOR USER 2
    revoke entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId1}"
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId2}"
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId3}"
    ensure there are "0" entitlements for user "${userId3}"


### REVOKE BY USERID + ENTITLEMENT_TYPE ONLY:
### WITHOUT CONDITION:

Test_NonMeteredEntitlements_RevokeByUserIdAndEntitlementType_SimpleType_x2_2Users
    [Documentation]    Entitlement with filters
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${entitlementType_Incorrect}      Set Variable    ENT_SIMPLE_INCORRECT
    ${userId1} =     generate random id
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement11}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement11}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement11}"
    ${entitlement11}=    grant entitlement "${entitlement11}"
    #...GRANT ENT2 FOR USER1
    ${entitlement12}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId1}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement12}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement12}"
    ${entitlement12}=    grant entitlement "${entitlement12}"
    #...GRANT ENT1 FOR USER2
    ${entitlement21}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId2}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement21}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement21}"
    ${entitlement21}=    grant entitlement "${entitlement21}"
    #...GRANT ENT2 FOR USER2
    ${entitlement22}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement22}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement22}"
    ${entitlement22}=    grant entitlement "${entitlement22}"
    ######
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE INCORRECT ENTITLEMENT_TYPE FOR USER1
    check entitlement with entitlementType "${entitlementType_Incorrect}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType_Incorrect}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType_Incorrect}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType_Incorrect}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType_Incorrect}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER1
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER2
    revoke entitlements for user "${userId2}" and entitlementType "${entitlementType1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "1" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER2
    revoke entitlements for user "${userId2}" and entitlementType "${entitlementType2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER1
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId2}"

###### REVOKE BY USERID + ENTITLEMENT_TYPE + GRANT_SOURCE ONLY:
### WITHOUT CONDITION:

Test_NonMeteredEntitlements_RevokeByUserIdAndEntitlementTypeAndGrantSource_SimpleType_x2_2Users
    [Documentation]    Entitlement with filters
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSource_Incorrect}      Set Variable    grantSource_Incorrect
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId1} =     generate random id
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement11}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement11}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement11}"
    ${entitlement11}=    grant entitlement "${entitlement11}"
    #...GRANT ENT2 FOR USER1
    ${entitlement12}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId1}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement12}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement12}"
    ${entitlement12}=    grant entitlement "${entitlement12}"
    #...GRANT ENT1 FOR USER2
    ${entitlement21}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId2}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement21}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement21}"
    ${entitlement21}=    grant entitlement "${entitlement21}"
    #...GRANT ENT2 FOR USER2
    ${entitlement22}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement22}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement22}"
    ${entitlement22}=    grant entitlement "${entitlement22}"
    ######
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE INCORRECT GRANT_SOURCE FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource_Incorrect}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType1}" and grantSource "${grantSource_Incorrect}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource_Incorrect}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER1
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType2}" and grantSource "${grantSource2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER2
    revoke entitlements for user "${userId2}" and entitlementType "${entitlementType1}" and grantSource "${grantSource1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "1" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER2
    revoke entitlements for user "${userId2}" and entitlementType "${entitlementType2}" and grantSource "${grantSource2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER1
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType1}" and grantSource "${grantSource1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId2}"

################# ADDITIONALLY:
### REVOKE BY USERID + ENTITLEMENT_TYPE + GRANT_SOURCE_ID ONLY:

Test_NonMeteredEntitlements_RevokeByUserIdAndEntitlementTypeAndGrantSourceId_SimpleType_x2_2Users
    [Documentation]    Entitlement with filters
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId_Incorrect}      Set Variable    grantSourceId_Incorrect
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId1} =     generate random id
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement11}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement11}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement11}"
    ${entitlement11}=    grant entitlement "${entitlement11}"
    #...GRANT ENT2 FOR USER1
    ${entitlement12}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId1}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement12}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement12}"
    ${entitlement12}=    grant entitlement "${entitlement12}"
    #...GRANT ENT1 FOR USER2
    ${entitlement21}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId2}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement21}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement21}"
    ${entitlement21}=    grant entitlement "${entitlement21}"
    #...GRANT ENT2 FOR USER2
    ${entitlement22}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement22}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement22}"
    ${entitlement22}=    grant entitlement "${entitlement22}"
    ######
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE INCORRECT GRANT_SOURCE_ID FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId_Incorrect}" for user "${userId1}" is "false" in DB
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType1}" and grantSourceId "${grantSourceId_Incorrect}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSourceId1}", grantSourceId "${grantSourceId_Incorrect}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER1
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType2}" and grantSourceId "${grantSourceId2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER2
    revoke entitlements for user "${userId2}" and entitlementType "${entitlementType1}" and grantSourceId "${grantSourceId1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "1" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER2
    revoke entitlements for user "${userId2}" and entitlementType "${entitlementType2}" and grantSourceId "${grantSourceId2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER1
    revoke entitlements for user "${userId1}" and entitlementType "${entitlementType1}" and grantSourceId "${grantSourceId1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId2}"

################# ADDITIONALLY:
### REVOKE BY USERID + GRANT_SOURCE ONLY:

Test_NonMeteredEntitlements_RevokeByUserIdAndGrantSource_SimpleType_x2_2Users
    [Documentation]    Entitlement with filters
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSource_Incorrect}      Set Variable    grantSource_Incorrect
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId1} =     generate random id
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement11}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement11}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement11}"
    ${entitlement11}=    grant entitlement "${entitlement11}"
    #...GRANT ENT2 FOR USER1
    ${entitlement12}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId1}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement12}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement12}"
    ${entitlement12}=    grant entitlement "${entitlement12}"
    #...GRANT ENT1 FOR USER2
    ${entitlement21}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId2}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement21}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement21}"
    ${entitlement21}=    grant entitlement "${entitlement21}"
    #...GRANT ENT2 FOR USER2
    ${entitlement22}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement22}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement22}"
    ${entitlement22}=    grant entitlement "${entitlement22}"
    ######
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE INCORRECT GRANT_SOURCE FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource_Incorrect}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    revoke entitlements for user "${userId1}" and grantSource "${grantSource_Incorrect}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource_Incorrect}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER1
    revoke entitlements for user "${userId1}" and grantSource "${grantSource2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER2
    revoke entitlements for user "${userId2}" and grantSource "${grantSource1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "1" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER2
    revoke entitlements for user "${userId2}" and grantSource "${grantSource2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER1
    revoke entitlements for user "${userId1}" and grantSource "${grantSource1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId2}"

################# ADDITIONALLY:
### REVOKE BY USERID + GRANT_SOURCE + GRANT_SOURCE_ID ONLY:

Test_NonMeteredEntitlements_RevokeByUserIdAndGrantSourceAndGrantSourceId_SimpleType_x2_2Users
    [Documentation]    Entitlement with filters
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSource_Incorrect}      Set Variable    grantSource_Incorrect
    ${grantSourceId_Incorrect}      Set Variable    grantSourceId_Incorrect
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId1} =     generate random id
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement11}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement11}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement11}"
    ${entitlement11}=    grant entitlement "${entitlement11}"
    #...GRANT ENT2 FOR USER1
    ${entitlement12}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId1}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement12}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement12}"
    ${entitlement12}=    grant entitlement "${entitlement12}"
    #...GRANT ENT1 FOR USER2
    ${entitlement21}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId2}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement21}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement21}"
    ${entitlement21}=    grant entitlement "${entitlement21}"
    #...GRANT ENT2 FOR USER2
    ${entitlement22}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement22}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement22}"
    ${entitlement22}=    grant entitlement "${entitlement22}"
    ######
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE INCORRECT GRANT_SOURCE AND GRANT_SOURCE_ID FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource_Incorrect}", grantSourceId "${grantSourceId_Incorrect}" for user "${userId1}" is "false" in DB
    revoke entitlements for user "${userId1}" and grantSource "${grantSource_Incorrect}" and grantSourceId "${grantSourceId_Incorrect}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource_Incorrect}", grantSourceId "${grantSourceId_Incorrect}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER1
    revoke entitlements for user "${userId1}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER2
    revoke entitlements for user "${userId2}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "1" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER2
    revoke entitlements for user "${userId2}" and grantSource "${grantSource2}" and grantSourceId "${grantSourceId2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER1
    revoke entitlements for user "${userId1}" and grantSource "${grantSource1}" and grantSourceId "${grantSourceId1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId2}"


################# ADDITIONALLY:
### REVOKE BY USERID + GRANT_SOURCE_ID ONLY:
Test_NonMeteredEntitlements_RevokeByUserIdAndGrantSourceId_SimpleType_x2_2Users
    [Documentation]    Entitlement with filters
    ${entitlementType1}      Set Variable    ENT_SIMPLE_1
    ${grantSource1}      Set Variable    grantSource_1
    ${grantSourceId_Incorrect}      Set Variable    grantSourceId_Incorrect
    ${grantSourceId1}      Set Variable    grantSourceId_1
    ${entitlementType2}      Set Variable    ENT_SIMPLE_2
    ${grantSource2}      Set Variable    grantSource_2
    ${grantSourceId2}      Set Variable    grantSourceId_2
    ${userId1} =     generate random id
    ${userId2} =     generate random id
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    #...GRANT ENT1 FOR USER1
    ${entitlement11}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId1}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement11}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement11}"
    ${entitlement11}=    grant entitlement "${entitlement11}"
    #...GRANT ENT2 FOR USER1
    ${entitlement12}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId1}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement12}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement12}"
    ${entitlement12}=    grant entitlement "${entitlement12}"
    #...GRANT ENT1 FOR USER2
    ${entitlement21}=    create entitlement with entitlementType "${entitlementType1}" for user "${userId2}"
    assign grantSourceId "${grantSourceId1}" to entitlement "${entitlement21}"
    assign grantSource "${grantSource1}" to entitlement "${entitlement21}"
    ${entitlement21}=    grant entitlement "${entitlement21}"
    #...GRANT ENT2 FOR USER2
    ${entitlement22}=    create entitlement with entitlementType "${entitlementType2}" for user "${userId2}"
    assign grantSourceId "${grantSourceId2}" to entitlement "${entitlement22}"
    assign grantSource "${grantSource2}" to entitlement "${entitlement22}"
    ${entitlement22}=    grant entitlement "${entitlement22}"
    ######
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE INCORRECT GRANT_SOURCE_ID FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId_Incorrect}" for user "${userId1}" is "false" in DB
    revoke entitlements for user "${userId1}" and grantSourceId "${grantSourceId_Incorrect}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSourceId1}", grantSourceId "${grantSourceId_Incorrect}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "true" in DB
    ensure there are "2" entitlements for user "${userId1}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER1
    revoke entitlements for user "${userId1}" and grantSourceId "${grantSourceId2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "2" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER2
    revoke entitlements for user "${userId2}" and grantSourceId "${grantSourceId1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "true"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "true" in DB
    ensure there are "1" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE2 FOR USER2
    revoke entitlements for user "${userId2}" and grantSourceId "${grantSourceId2}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "true"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "true" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "1" entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ######
    #...REVOKE ENTITLEMENT_TYPE1 FOR USER1
    revoke entitlements for user "${userId1}" and grantSourceId "${grantSourceId1}"
    #...CHECK ENTITLEMENT(S) FOR USER1
    check entitlement with entitlementType "${entitlementType1}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId1}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId1}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId1}" is "false" in DB
    ensure there are "0" entitlements for user "${userId1}"
    ensure there are no entitlements for user "${userId1}"
    #...CHECK ENTITLEMENT(S) FOR USER2
    check entitlement with entitlementType "${entitlementType1}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType1}" and grantSource "${grantSource1}", grantSourceId "${grantSourceId1}" for user "${userId2}" is "false" in DB
    check entitlement with entitlementType "${entitlementType2}" for user "${userId2}" is "false"
    ensure that entitlement with entitlementType "${entitlementType2}" and grantSource "${grantSource2}", grantSourceId "${grantSourceId2}" for user "${userId2}" is "false" in DB
    ensure there are "0" entitlements for user "${userId2}"
    ensure there are no entitlements for user "${userId2}"
