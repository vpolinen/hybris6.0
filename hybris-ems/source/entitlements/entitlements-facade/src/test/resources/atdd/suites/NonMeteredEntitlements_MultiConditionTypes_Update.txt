*** Settings ***
Resource    entitlements-test/settings_keywords.txt
Resource    entitlements-test/builder_entitlements_keywords.txt
Resource    entitlements-test/modify_entitlements_keywords.txt
Resource    entitlements-test/exceptions_entitlements_keywords.txt
Resource    entitlements-test/check_entitlements_keywords.txt
Resource    entitlements-test/use_entitlements_keywords.txt

*** Test Cases ***
### NONE -> A+B
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_WithoutCondition_To_StringAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_WithoutCondition_To_StringAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_WithoutCondition_To_PathAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
	${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_WithoutCondition_To_GeoAndStringCondition
    [Documentation]    Update entitlement without condition by geo+string condition
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_WithoutCondition_To_GeoAndPathCondition
    [Documentation]    Update entitlement without condition by geo+path condition
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
	${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_GEO}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_GEO}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_GEO}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_WithoutCondition_To_GeoAndTimeframeCondition
    [Documentation]    Update entitlement without condition by geo+timeframe condition
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_GEO}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_GEO}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_GEO}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### NONE -> A+B+C
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_WithoutCondition_To_StringAndPathAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_SIMPLE" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_SIMPLE" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_SIMPLE" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_SIMPLE" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A -> newA+B
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringCondition_To_NewStringAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${CHECK_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_STR" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR2}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringCondition_To_NewStringAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${CHECK_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_STR" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "true"
    #no timeframe condition defined - the entitlement is not bounded in time, so it is valid against any date:
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR2}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

###
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringCondition_To_NewStringAndGeoCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${CHECK_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_STR" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR2}" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR2}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"
    ###

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathCondition_To_NewPathAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH1}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH1}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_PATH2}    Set Variable    "path" condition with parameters {"path":"/rootA"}
    ${CHECK_PATH2}    Set Variable    "path" condition with parameters {"file":"/rootA"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_PATH" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH2}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathCondition_To_NewPathAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH1}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH1}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_PATH2}    Set Variable    "path" condition with parameters {"path":"/rootA"}
    ${CHECK_PATH2}    Set Variable    "path" condition with parameters {"file":"/rootA"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_PATH" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "true"
    #no timeframe condition defined - the entitlement is not bounded in time, so it is valid against any date:
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH2}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathCondition_To_NewPathAndGeoCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH1}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH1}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_PATH2}    Set Variable    "path" condition with parameters {"path":"/rootA"}
    ${CHECK_PATH2}    Set Variable    "path" condition with parameters {"file":"/rootA"}
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_PATH" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH2}" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH2}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeCondition_To_NewTimeframeAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME1}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME1}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${GRANT_TIME2}    Set Variable    "timeframe" condition with parameters {"startTime":"2011-01-01T00:00:00Z","endTime":"2011-01-01T00:00:02Z"}
    ${CHECK_TIME2}    Set Variable    "timeframe" condition with parameters {"time":"2011-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_TIME" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME2}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeCondition_To_NewTimeframeAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME1}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME1}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${GRANT_TIME2}    Set Variable    "timeframe" condition with parameters {"startTime":"2011-01-01T00:00:00Z","endTime":"2011-01-01T00:00:02Z"}
    ${CHECK_TIME2}    Set Variable    "timeframe" condition with parameters {"time":"2011-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_TIME" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME2}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeCondition_To_NewTimeframeAndGeoCondition
    [Documentation]    Update entitlement without condition by adding string condition
	${GRANT_TIME1}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME1}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${GRANT_TIME2}    Set Variable    "timeframe" condition with parameters {"startTime":"2011-01-01T00:00:00Z","endTime":"2011-01-01T00:00:02Z"}
    ${CHECK_TIME2}    Set Variable    "timeframe" condition with parameters {"time":"2011-01-01T00:00:01Z"}
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_TIME" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME2}" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME1}|${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME2}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

#################
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_GeoCondition_To_NewGeoAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_GEO1}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO1}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${GRANT_GEO2}    Set Variable    "geo" condition with parameters {"geoPath":"Russia/Omskaya oblast/Omsk"}
    ${CHECK_GEO2}    Set Variable    "geo" condition with parameters {"geoPath":"Russia/Omskaya oblast/Omsk"}
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_GEO" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_GEO1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO2}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_GeoCondition_To_NewGeoAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_GEO1}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO1}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${GRANT_GEO2}    Set Variable    "geo" condition with parameters {"geoPath":"Russia/Omskaya oblast/Omsk"}
    ${CHECK_GEO2}    Set Variable    "geo" condition with parameters {"geoPath":"Russia/Omskaya oblast/Omsk"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_GEO" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_GEO1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO2}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_GeoCondition_To_NewGeoAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_GEO1}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO1}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${GRANT_GEO2}    Set Variable    "geo" condition with parameters {"geoPath":"Russia/Omskaya oblast/Omsk"}
    ${CHECK_GEO2}    Set Variable    "geo" condition with parameters {"geoPath":"Russia/Omskaya oblast/Omsk"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_GEO" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_GEO1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "true"
    #no timeframe condition defined - the entitlement is not bounded in time, so it is valid against any date:
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO2}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO2}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

###############


### A -> previousA+B
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringCondition_To_PreviousStringAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_STR" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringCondition_To_PreviousStringAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_STR" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    #no timeframe condition defined - the entitlement is not bounded in time, so it is valid against any date:
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${CHECK_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringCondition_To_PreviousStringAndGeoCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_STR" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${CHECK_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathCondition_To_PreviousPathAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_PATH" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathCondition_To_PreviousPathAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_PATH" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    #no timeframe condition defined - the entitlement is not bounded in time, so it is valid against any date:
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathCondition_To_PreviousPathAndGeoCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_PATH" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeCondition_To_PreviousTimeframeAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_TIME" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeCondition_To_PreviousTimeframeAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_TIME" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeCondition_To_PreviousTimeframeAndGeoCondition
    [Documentation]    Update entitlement without condition by adding string condition
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_TIME" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_GEO}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_GeoCondition_To_PreviousGeoAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_GEO" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_GeoCondition_To_PreviousGeoAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_GEO" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_GeoCondition_To_PreviousGeoAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_GEO" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "true"
    #no timeframe condition defined - the entitlement is not bounded in time, so it is valid against any date:
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_GEO" and conditions "${CHECK_GEO}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_GEO" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A -> newA+B+C (no geocondition tcs so far)
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringCondition_To_NewStringAndPathAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_STR" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_STR" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_STR" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathCondition_To_StringAndNewPathAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_PATH" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_PATH" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_PATH" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeCondition_To_StringAndPathAndNewTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_TIME" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_TIME" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_TIME" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B -> previousA (no geocondition tcs so far)
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathCondition_To_PreviousStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndTimeframeCondition_To_PreviousStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathAndStringCondition_To_PreviousPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathAndTimeframeCondition_To_PreviousPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeAndStringCondition_To_PreviousTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}|${CHECK_STR}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeAndPathCondition_To_PreviousTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B -> newA / newB / newC (no geocondition tcs so far)
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathCondition_To_NewStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${CHECK_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR1}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR2}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndTimeframeCondition_To_NewStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${CHECK_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR1}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR2}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathAndStringCondition_To_NewPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH1}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH1}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_PATH2}    Set Variable    "path" condition with parameters {"path":"/rootA"}
    ${CHECK_PATH2}    Set Variable    "path" condition with parameters {"file":"/rootA"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}|${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH2}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"


Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathAndTimeframeCondition_To_NewPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH1}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH1}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_PATH2}    Set Variable    "path" condition with parameters {"path":"/rootA"}
    ${CHECK_PATH2}    Set Variable    "path" condition with parameters {"file":"/rootA"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH2}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH2}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeAndStringCondition_To_NewTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME1}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME1}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
	${GRANT_TIME2}    Set Variable    "timeframe" condition with parameters {"startTime":"2011-01-01T00:00:00Z","endTime":"2011-01-01T00:00:02Z"}
    ${CHECK_TIME2}    Set Variable    "timeframe" condition with parameters {"time":"2011-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}|${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME2}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}|${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}|${CHECK_STR}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_TimeframeAndPathCondition_To_NewTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME1}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME1}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
	${GRANT_TIME2}    Set Variable    "timeframe" condition with parameters {"startTime":"2011-01-01T00:00:00Z","endTime":"2011-01-01T00:00:02Z"}
    ${CHECK_TIME2}    Set Variable    "timeframe" condition with parameters {"time":"2011-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}|${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME2}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B -> previousA+C (no geocondition tcs so far)
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathCondition_To_PreviousStringAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
	${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
	add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
	check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
	check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
	check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndTimeframeCondition_To_PreviousStringAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathAndTimeframeCondition_To_PreviousPathAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B -> previousA+previousB (no geocondition tcs so far)
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathCondition_To_PreviousStringAndPreviousPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndTimeframeCondition_To_PreviousStringAndPreviousTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_PathAndTimeframeCondition_To_PreviousPathAndPreviousTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B -> newA+C
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndTimeframeCondition_To_NewStringAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${CHECK_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR1}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR2}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B -> newA+newB
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndTimeframeCondition_To_NewStringAndNewTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR1}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${CHECK_STR2}    Set Variable    "string" condition with parameters {"string":"xyz"}
    ${GRANT_TIME1}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME1}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
	${GRANT_TIME2}    Set Variable    "timeframe" condition with parameters {"startTime":"2011-01-01T00:00:00Z","endTime":"2011-01-01T00:00:02Z"}
    ${CHECK_TIME2}    Set Variable    "timeframe" condition with parameters {"time":"2011-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_TIME2}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR1}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME1}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME1}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_TIME2}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR2}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME2}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME2}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR1}|${CHECK_TIME1}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR2}|${CHECK_TIME2}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> NONE (so A+B -> NONE skipped)
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_WithoutCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> A
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_StringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> B
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_PathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> C
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_TimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> A+B
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_StringAndPathCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> A+C
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_StringAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> B+C
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_PathAndTimeframeCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"

### A+B+C -> C+B+A
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ConditionType_StringAndPathAndTimeframeCondition_To_TimeframeAndPathAndStringCondition
    [Documentation]    Update entitlement without condition by adding string condition
    ${GRANT_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}    Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
	${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${userId} =     generate random id
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "false"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "false" in DB
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    assign grantSourceId "grantSourceId" to entitlement "${entitlement}"
    assign grantSource "grantSource" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ${entitlement}=    remove all conditions from entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_TIME}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "ENT_1" and grantSource "grantSource", grantSourceId "grantSourceId" for user "${userId}" is "true" in DB
    ensure there are "1" entitlements for user "${userId}"


### A+B -> newA+previousB AND A+B -> previousA are postponed/skipped!!!

### Updating  grantSource AND grantSourceId try:

Test_NonMeteredEntitlements_MultiConditionTypes_Update_GrantSource_And_GrantSourceId
    [Documentation]    Update - grantSource and grantSourceId shouldn't be possible to update
    ${userId} =         generate random id
    ${GRANT_STR}       Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}      Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    ${GRANT_TIME}    Set Variable    "timeframe" condition with parameters {"startTime":"2010-01-01T00:00:00Z","endTime":"2010-01-01T00:00:02Z"}
    ${CHECK_TIME}    Set Variable    "timeframe" condition with parameters {"time":"2010-01-01T00:00:01Z"}
    ${GRANT_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${CHECK_GEO}    Set Variable    "geo" condition with parameters {"geoPath":"Germany/Bavaria/Munich"}
    ${entitlementType}      Set Variable    ENT_MULTI
    ${entitlement}=    create entitlement with entitlementType "${entitlementType}" for user "${userId}"
    assign grantSource "grantSource_1" to entitlement "${entitlement}"
    assign grantSourceId "grantSourceId_1" to entitlement "${entitlement}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    add condition "${GRANT_TIME}" to entitlement "${entitlement}"
    add condition "${GRANT_GEO}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_1", grantSourceId "grantSourceId_1" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_2", grantSourceId "grantSourceId_1" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_1", grantSourceId "grantSourceId_2" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_2", grantSourceId "grantSourceId_2" for user "${userId}" is "false" in DB
    assign grantSource "grantSource_2" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_1", grantSourceId "grantSourceId_1" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_2", grantSourceId "grantSourceId_1" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_1", grantSourceId "grantSourceId_2" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_2", grantSourceId "grantSourceId_2" for user "${userId}" is "false" in DB
    assign grantSourceId "grantSourceId_2" to entitlement "${entitlement}"
    update entitlement "${entitlement}"
    check entitlement with entitlementType "${entitlementType}" and conditions "${CHECK_STR}|${CHECK_PATH}|${CHECK_TIME}|${CHECK_GEO}" for user "${userId}" is "true"
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_1", grantSourceId "grantSourceId_1" for user "${userId}" is "true" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_2", grantSourceId "grantSourceId_1" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_1", grantSourceId "grantSourceId_2" for user "${userId}" is "false" in DB
    ensure that entitlement with entitlementType "${entitlementType}" and grantSource "grantSource_2", grantSourceId "grantSourceId_2" for user "${userId}" is "false" in DB

### NEW:
Test_NonMeteredEntitlements_MultiConditionTypes_Update_ClearConditions
    [Documentation]    Delete all grant conditions
    ${userId} =     generate random id
    ${GRANT_STR}       Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}      Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    delete conditions of grant "${entitlement.id}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" for user "${userId}" is "true"

Test_NonMeteredEntitlements_MultiConditionTypes_Update_DeleteConditionByType
    [Documentation]    Delete conditions having given type
    ${userId} =     generate random id
    ${GRANT_STR}       Set Variable    "string" condition with parameters {"string":"abc"}
    ${GRANT_PATH}      Set Variable    "path" condition with parameters {"path":"/root"}
    ${CHECK_STR}    Set Variable    "string" condition with parameters {"string":"abc"}
    ${CHECK_PATH}    Set Variable    "path" condition with parameters {"file":"/root"}
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "false"
    ${entitlement}=    create entitlement with entitlementType "ENT_1" for user "${userId}"
    add condition "${GRANT_STR}" to entitlement "${entitlement}"
    add condition "${GRANT_PATH}" to entitlement "${entitlement}"
    ${entitlement}=    grant entitlement "${entitlement}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "true"
    delete condition "path" of grant "${entitlement.id}"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}|${CHECK_PATH}" for user "${userId}" is "false"
    check entitlement with entitlementType "ENT_1" and conditions "${CHECK_STR}" for user "${userId}" is "true"

